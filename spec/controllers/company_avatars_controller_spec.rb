require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CompanyAvatarsController do

  render_views

  describe 'if user is not eligible' do

    before(:each) do
      login_set_user_seed([:customer, :company_avatar], true)
    end

    it 'should redirect to login when user requests a specific avatar' do
      get :show, :customer_id => @test_customer, :id => @test_customer.company_avatar.id
      response.should redirect_to('/users/sign_in')
    end

    it 'should redirect to login when user tries to destroy a specific avatar' do
      delete :destroy, :customer_id => @test_customer, :id => @test_customer.company_avatar.id
      response.should redirect_to('/users/sign_in')
    end

  end

  describe 'if user is eligible' do

    before(:each) do
      login_set_user_seed([:customer,:company_avatar])
    end

    it 'shows a specific avatar' do
      get :show, :customer_id => @test_customer, :id => @test_customer.company_avatar.id
      response.should have_selector('img')

      response.should have_selector('*[role="main"]') do |div|
        response.should have_selector( "a[@href=\"#{customer_path(@test_customer)}\"]")
      end
    end

  end

end
