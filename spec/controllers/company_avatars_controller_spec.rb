require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CompanyAvatarsController do

  render_views

  describe 'if user is not eligible' do

    before(:each) do
      login_set_user_seed([:customer, :company_avatar], true)
    end

    it 'should redirect to login when user requests a specific avatar' do
      get :show, :customer_id => @test_customer, :id => @test_customer.company_avatar.id
      response.should redirect_to('/users/sign_in')
    end

    it 'should redirect to login when user tries to destroy a specific avatar' do
      delete :destroy, :customer_id => @test_customer, :id => @test_customer.company_avatar.id
      response.should redirect_to('/users/sign_in')
    end

  end

  describe 'if user is eligible' do

    before(:all) do
=begin
      att = ActionDispatch::Http::UploadedFile.new({
                                                    :filename => "#{Rails.root}/lib/assets/images/logo_1.png",
                                                    :content_type => 'image/png',
                                                    :tempfile => File.new("#{Rails.root}/spec/upload/missing.jpg")
                                                })
=end

      ### see: http://stackoverflow.com/questions/7957823/rspec-converting-post-params-to-string-testing-file-uploader
      att = fixture_file_upload('/logo_1.png', 'image/png')
      @valid_attr = {
          avatar: att
      }
    end

    before(:each) do
      login_set_user_seed([:customer,:company_avatar])
    end

    describe "routing" do

      it "routes to #create if avatar is created when customer doesn't exist so far" do
        { :post => '/company_avatars' }.should \
          route_to(:controller => 'company_avatars', :action => 'create')
      end

      it "routes to nested #create if avatar is created for an existing customer" do
        { :post => "/customers/#{@test_customer.id}/company_avatars" }.should \
          route_to(:controller => 'company_avatars', :action => 'create', :customer_id => @test_customer.id.to_s)
      end

      it "routes to nested #show if avatar is associated with a customer" do
        { :get => "/customers/#{@test_customer.id}/company_avatars/#{@test_customer.company_avatar.id}" }.should \
          route_to(:controller => 'company_avatars', :action => 'show', :customer_id => @test_customer.id.to_s, :id => @test_customer.company_avatar.id.to_s)
      end

      it "routes to nested #destroy if avatar is associate dwith a customer" do
        { :delete => "/customers/#{@test_customer.id}/company_avatars/#{@test_customer.company_avatar.id}" }.should \
          route_to(:controller => 'company_avatars', :action => 'destroy', :customer_id => @test_customer.id.to_s, :id => @test_customer.company_avatar.id.to_s)
      end

      ################
      ### not routable

      it "doesn't route to #edit" do
        { :get => "/customers/#{@test_customer.id}/company_avatars/#{@test_customer.company_avatar.id}/edit"}.should_not \
          be_routable
      end

      it "doesn't route to #update" do
        { :put => "/customers/#{@test_customer.id}/company_avatars/#{@test_customer.company_avatar.id}"}.should_not \
          be_routable
      end

      it "doesn't route to #index" do
        { :get => "/customers/#{@test_customer.id}/company_avatars" }.should_not \
          be_routable
      end

    end

    it 'shows a specific avatar associated with the customer' do
      get :show, :customer_id => @test_customer, :id => @test_customer.company_avatar.id
      response.should have_selector('img')

      response.should have_selector('*[role="main"]') do |div|
        response.should have_selector( "a[@href=\"#{customer_path(@test_customer)}\"]")
      end
    end

    it 'destroys a specific avatar associated with the customer' do
      expect {
        delete :destroy, :customer_id => @test_customer.id, :id => @test_customer.company_avatar.id
      }.to change(CompanyAvatar,:count).by(-1)
    end

    it 'creates a specific avatar for a customer' do
      expect {
        post :create, :customer_id => @test_customer.id, :company_avatar => @valid_attr
      }.to change(CompanyAvatar,:count).by(1)
    end

    it 'creates an avatar when no customer is defined' do
      expect {
        post :create, :company_avatar => @valid_attr
      }.to change(CompanyAvatar,:count).by(1)
    end

  end

end
